<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Oli Pratt - REST</title><link href="http://olipratt.co.uk/" rel="alternate"></link><link href="http://olipratt.co.uk/feeds/rest.atom.xml" rel="self"></link><id>http://olipratt.co.uk/</id><updated>2017-02-12T17:37:00+00:00</updated><entry><title>REST APIs Notes and References</title><link href="http://olipratt.co.uk/rest-apis-notes-and-references.html" rel="alternate"></link><published>2017-02-12T17:37:00+00:00</published><updated>2017-02-12T17:37:00+00:00</updated><author><name>Oli Pratt</name></author><id>tag:olipratt.co.uk,2017-02-12:/rest-apis-notes-and-references.html</id><summary type="html">&lt;p&gt;After working to create a &lt;a href="http://olipratt.co.uk/python-rest-api-with-swaggerui.html"&gt;REST API&lt;/a&gt; and &lt;a href="http://olipratt.co.uk/python-rest-api-client-adhering-to-a-swagger-schema.html"&gt;client&lt;/a&gt; recently, here are some notes and resources I found useful.&lt;/p&gt;
&lt;h4&gt;General notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resource collection names should always be plural.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depending on who (client vs server) names resources, creation switches between &lt;code&gt;PUT&lt;/code&gt;/&lt;code&gt;POST&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client names resources:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PUT /kittens/&amp;lt;my_kittens_name&amp;gt;&lt;/code&gt; - creates a resource …&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;After working to create a &lt;a href="http://olipratt.co.uk/python-rest-api-with-swaggerui.html"&gt;REST API&lt;/a&gt; and &lt;a href="http://olipratt.co.uk/python-rest-api-client-adhering-to-a-swagger-schema.html"&gt;client&lt;/a&gt; recently, here are some notes and resources I found useful.&lt;/p&gt;
&lt;h4&gt;General notes&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resource collection names should always be plural.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Depending on who (client vs server) names resources, creation switches between &lt;code&gt;PUT&lt;/code&gt;/&lt;code&gt;POST&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client names resources:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PUT /kittens/&amp;lt;my_kittens_name&amp;gt;&lt;/code&gt; - creates a resource there&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;server names resources:&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POST /things&lt;/code&gt; - Creates a new &lt;code&gt;thing&lt;/code&gt; at &lt;code&gt;/things/&amp;lt;autogened_id&amp;gt;&lt;/code&gt;, with that ID returned in the response to the post&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Some useful references&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api"&gt;General REST API best practices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.restapitutorial.com/lessons/httpmethods.html"&gt;Explanations of the REST verbs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="REST"></category></entry><entry><title>Python REST API Client Adhering to a Swagger Schema</title><link href="http://olipratt.co.uk/python-rest-api-client-adhering-to-a-swagger-schema.html" rel="alternate"></link><published>2017-02-11T19:13:00+00:00</published><updated>2017-02-11T19:13:00+00:00</updated><author><name>Oli Pratt</name></author><id>tag:olipratt.co.uk,2017-02-11:/python-rest-api-client-adhering-to-a-swagger-schema.html</id><summary type="html">&lt;p&gt;After &lt;a href="http://olipratt.co.uk/python-rest-api-with-swaggerui.html"&gt;building a REST API&lt;/a&gt; I left it alone for a while before coming back to try and get a client working properly.&lt;/p&gt;
&lt;p&gt;Similar goals here to back then - find a good library to use going forwards that does the heavy lifting and make a simple example project. I chose …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After &lt;a href="http://olipratt.co.uk/python-rest-api-with-swaggerui.html"&gt;building a REST API&lt;/a&gt; I left it alone for a while before coming back to try and get a client working properly.&lt;/p&gt;
&lt;p&gt;Similar goals here to back then - find a good library to use going forwards that does the heavy lifting and make a simple example project. I chose a simple microservice that provides an API for decks of playing cards - like a casino dealer type of thing - which would be a client of the datastore I created in the link above.&lt;/p&gt;
&lt;h2&gt;Choosing a Client Package&lt;/h2&gt;
&lt;p&gt;The standard seems to be to &lt;a href="https://github.com/swagger-api/swagger-codegen"&gt;generate code&lt;/a&gt; to meet a schema, but I'd rather load it dynamically into an app if possible.&lt;/p&gt;
&lt;p&gt;After a bit of looking I found &lt;a href="http://bravado.readthedocs.io/en/latest/"&gt;Bravado&lt;/a&gt; which looked promising. However, it was a pain to install - it relies on the twisted package and that doesn't seem to install on Windows through pip successfully, so after some failed attempts to get it to work I gave up. I figure it's not worth using if it's going to be a pain for others to install - shame :(.&lt;/p&gt;
&lt;p&gt;Next up was &lt;a href="http://pyswagger.readthedocs.io/en/latest/"&gt;pyswagger&lt;/a&gt; - it seems to provide all the functionality and be well maintained (commits in the past few days when I wrote this). The API doesn't look as polished to me when compared to &lt;code&gt;bravado&lt;/code&gt; above, but it worked fine in practice.&lt;/p&gt;
&lt;p&gt;On the testing point - &lt;code&gt;pyswagger&lt;/code&gt; uses  &lt;code&gt;requests&lt;/code&gt; for HTTP requests, so we can easily test using the &lt;a href="https://github.com/getsentry/responses"&gt;responses&lt;/a&gt; library to provide mock responses to them.&lt;/p&gt;
&lt;h2&gt;The First Test&lt;/h2&gt;
&lt;p&gt;This was painful to get working, but as always trivial to fix in the end.&lt;/p&gt;
&lt;p&gt;I needed to load in the schema, and then intercept the requests over the network for each API call. Intercepting the API calls was trivial with &lt;code&gt;responses&lt;/code&gt;, but loading in the schema turned out to be less so.&lt;/p&gt;
&lt;p&gt;There were two approaches I could see:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pyswagger&lt;/code&gt; lets you load in a schema from file, so just pass it a file name&lt;/li&gt;
&lt;li&gt;intercept the request for the schema over the network&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, both failed when I tried:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if I loaded in the schema from file, &lt;code&gt;pyswagger&lt;/code&gt; would then try and make API requests using the &lt;code&gt;file&lt;/code&gt; scheme, which causes it to fall over as that's not a &lt;a href="https://github.com/mission-liao/pyswagger/blob/cff50d0b49da984666e1a350cff3e7bdf71d0b13/pyswagger/contrib/client/requests.py#L11"&gt;supported scheme&lt;/a&gt; for that part it seems.&lt;/li&gt;
&lt;li&gt;the request for the schema over the network uses &lt;a href="https://github.com/mission-liao/pyswagger/blob/cff50d0b49da984666e1a350cff3e7bdf71d0b13/pyswagger/getter.py#L136"&gt;&lt;code&gt;urllib.urlopen&lt;/code&gt; rather than &lt;code&gt;requests&lt;/code&gt;&lt;/a&gt; so I couldn't easily intercept it with &lt;code&gt;responses&lt;/code&gt; and would have to do more mocking of the deep internals of &lt;code&gt;pyswagger&lt;/code&gt;, which seemed wrong.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lots of trial-and-error and reading of the &lt;code&gt;pyswagger&lt;/code&gt; source later I found the solution in the &lt;a href="https://github.com/mission-liao/pyswagger/blob/cff50d0b49da984666e1a350cff3e7bdf71d0b13/pyswagger/tests/contrib/client/test_requests.py#L28"&gt;tests of the client in &lt;code&gt;pyswagger&lt;/code&gt; itself&lt;/a&gt;. They were doing exactly what I was trying in the first bullet above - loading in the schema from file then intercepting API requests - so why were their API requests working? It turns out their schema had two entries not added by &lt;code&gt;Flask-RESTPlus&lt;/code&gt; - &lt;a href="https://github.com/mission-liao/pyswagger/blob/cff50d0b49da984666e1a350cff3e7bdf71d0b13/pyswagger/tests/data/v2_0/wordnik/swagger.json#L16"&gt;&lt;code&gt;host&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://github.com/mission-liao/pyswagger/blob/cff50d0b49da984666e1a350cff3e7bdf71d0b13/pyswagger/tests/data/v2_0/wordnik/swagger.json#L40"&gt;&lt;code&gt;schemes&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I just needed this in top level of my schema saved in a file for the tests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1:5000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;quot;schemes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt;
   &lt;span class="p"&gt;],&lt;/span&gt;
   &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that, &lt;code&gt;pyswagger&lt;/code&gt; can load schema from file for tests, and then send API requests over HTTP to that address, and we can use &lt;code&gt;responses&lt;/code&gt; to catch those and respond to them.&lt;/p&gt;
&lt;p&gt;Phew!&lt;/p&gt;
&lt;h2&gt;Overall&lt;/h2&gt;
&lt;p&gt;Once I had wasted far too long trying to get a test working, everything else was straightforward, basically just following the &lt;a href="https://github.com/mission-liao/pyswagger#tutorial"&gt;tutorials linked in the &lt;code&gt;pyswagger&lt;/code&gt; readme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When you have loaded in the schema to &lt;code&gt;pyswagger&lt;/code&gt;, you just reference API calls by name in the schema, which &lt;code&gt;Flask-RESTPlus&lt;/code&gt; auto-generates from the class names you give to resources, and you can rename if you want - details of both of those bits of logic &lt;a href="https://flask-restplus.readthedocs.io/en/stable/swagger.html#documenting-the-methods"&gt;here&lt;/a&gt;. &lt;code&gt;pyswagger&lt;/code&gt; makes sure you pass in all the right arguments in the right format, so if you have models in the schema you pretty much have to use the API correctly or any attempts will be rejected, which is great for catching bugs early.&lt;/p&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;p&gt;Here's the project - &lt;a href="https://github.com/olipratt/microcarddeck"&gt;microcarddeck&lt;/a&gt;. I didn't end up implementing much function because I didn't need to - I got to exercise the &lt;code&gt;pyswagger&lt;/code&gt; package and get a feel for how to use it, and got a good simple bit of reference code to crib from in the future.&lt;/p&gt;</content><category term="Python"></category><category term="REST"></category><category term="Swagger"></category><category term="pyswagger"></category></entry><entry><title>Python REST API With SwaggerUI</title><link href="http://olipratt.co.uk/python-rest-api-with-swaggerui.html" rel="alternate"></link><published>2016-10-29T11:45:00+01:00</published><updated>2016-10-29T11:45:00+01:00</updated><author><name>Oli Pratt</name></author><id>tag:olipratt.co.uk,2016-10-29:/python-rest-api-with-swaggerui.html</id><summary type="html">&lt;p&gt;What with REST APIs and the &lt;a href="http://swagger.io/"&gt;swagger&lt;/a&gt; framework for documenting and integrating them being the in-thing lately, to start getting to grips with them I wanted to see how easy it would be to create a simple one in Python with minimal code from me. Turns out it was very …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What with REST APIs and the &lt;a href="http://swagger.io/"&gt;swagger&lt;/a&gt; framework for documenting and integrating them being the in-thing lately, to start getting to grips with them I wanted to see how easy it would be to create a simple one in Python with minimal code from me. Turns out it was very simple.&lt;/p&gt;
&lt;p&gt;As practice project I picked writing a really simple datastore.&lt;/p&gt;
&lt;h2&gt;Choosing a Package&lt;/h2&gt;
&lt;p&gt;After looking around for something that provides a SwaggerUI (&lt;a href="http://petstore.swagger.io/"&gt;demo here&lt;/a&gt; to see what this looks like) and schema, I found &lt;a href="https://flask-restplus.readthedocs.io/en/stable/index.html"&gt;Flask-RESTPlus&lt;/a&gt; which does this &lt;a href="https://flask-restplus.readthedocs.io/en/stable/swagger.html#swagger-ui"&gt;really easily out of the box&lt;/a&gt;. It also builds on top of &lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; which I've heard good things about and wanted to try for a while - having only used &lt;a href="http://cherrypy.org/"&gt;cherrypy&lt;/a&gt; before myself.&lt;/p&gt;
&lt;p&gt;Another thing I wanted was to be able to easily test the API, and it seemed  &lt;code&gt;Flask&lt;/code&gt; is really &lt;a href="http://flask.pocoo.org/docs/0.11/testing/"&gt;easy to test&lt;/a&gt;, and so by extension so is &lt;code&gt;Flask-RESTPlus&lt;/code&gt; as it just plugs in on top. So this combo sounded like a good choice to get going.&lt;/p&gt;
&lt;p&gt;I also needed some way to store the data and so looked for a really simple key-value store. A quick search gave &lt;a href="http://tinydb.readthedocs.io/en/latest/getting-started.html"&gt;TinyDB&lt;/a&gt; - small, easy to set up, and stores Python &lt;code&gt;dict&lt;/code&gt;s directly (&lt;a href="https://docs.python.org/3.5/library/json.html#json.loads"&gt;easily converted to&lt;/a&gt; from the JSON used in the API).&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;Getting something up and running was very straightforward - I followed the tutorial &lt;a href="http://michal.karzynski.pl/blog/2016/06/19/building-beautiful-restful-apis-using-flask-swagger-ui-flask-restplus/"&gt;here&lt;/a&gt; and wrote tests as I went.&lt;/p&gt;
&lt;p&gt;That was followed by lots of tweaking/playing with the contents of the SwaggerUI page and working out how to create data models to enforce on the API, but the bulk of the work to get going was trivial.&lt;/p&gt;
&lt;h2&gt;Impressions&lt;/h2&gt;
&lt;p&gt;The SwaggerUI page is &lt;strong&gt;really&lt;/strong&gt; great for exploring and documenting APIs. Often it's hard to grasp how to integrate with some new code from reading it, but here you can actually play with the interface, press buttons to see what happens, and provide input and follow it through different API calls - really nice to use. Definitely like it and plan to use it more.&lt;/p&gt;
&lt;p&gt;With a bit of reading of the &lt;code&gt;Flask-RESTPlus&lt;/code&gt; docs you can edit all the fields and documentation in the Swagger UI page so you can make it as easy to use as possible - looks like it's fully featured in that respect and was a good choice.&lt;/p&gt;
&lt;h2&gt;Gotchas&lt;/h2&gt;
&lt;p&gt;It wasn't entirely plain sailing though - here are the main problems I hit that it's worth being aware of!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You have to use a non-empty prefix for your API to start at (&lt;a href="https://flask-restplus.readthedocs.io/en/stable/api.html#flask_restplus.Api"&gt;&lt;code&gt;prefix&lt;/code&gt; parameter here&lt;/a&gt;). I &lt;a href="https://github.com/noirbizarre/flask-restplus/issues/210"&gt;raised an issue about it&lt;/a&gt; but it didn't garner much attention. It's pretty minor though - I suspect any real system would not have the API exposed on &lt;code&gt;/&lt;/code&gt; directly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It doesn't seem like the swagger schema is exposed anywhere over HTTP by &lt;code&gt;Flask-RESTPlus&lt;/code&gt; by default. However, it's really easy to do so, just return &lt;code&gt;api.__schema__&lt;/code&gt; as the response to a &lt;code&gt;GET&lt;/code&gt; request and it's there. I ended up doing that in a separate &lt;code&gt;schema&lt;/code&gt; namespace so it gets it's own top-level section in the SwaggerUI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you use the &lt;code&gt;@api.expect&lt;/code&gt; decorator to state what model the incoming data must match, &lt;code&gt;Flask-RESTPlus&lt;/code&gt; won't force incoming data to conform unless you set the &lt;code&gt;validate=True&lt;/code&gt; parameter on it - seems like the wrong default to me...&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;End Result&lt;/h2&gt;
&lt;p&gt;And here's the result - &lt;a href="https://github.com/olipratt/microstore"&gt;microstore&lt;/a&gt; - a trivial datastore with a rest API and documented and interactive via SwaggerUI. I kept all the code &lt;a href="https://github.com/olipratt/microstore/blob/master/microstore.py"&gt;in one file&lt;/a&gt; to make it as simple a reference as possible.&lt;/p&gt;
&lt;p&gt;I'd say it was a success, and was a fun weekend!&lt;/p&gt;</content><category term="Python"></category><category term="REST"></category><category term="Swagger"></category><category term="Flask-RESTPlus"></category></entry></feed>